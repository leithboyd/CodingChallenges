
If deleting a character would introduce a uniform character sequence of length >= 3 then a neighbour can safely be deleted instead.
Deleting the neighbour will not invalidate the atleast one lower/upper/digit constrait as this character will occure atleast 3 times in the sequence.
a b a a  -->  a b a a 
  D      -->      D

Using only replace operations
N repeated characters  3  4  5  6  7  8  9 10 11 
Min replace operations 1  1  1  2  2  2  3  3  3  == N // 3

min value for op such that (N - op)/(op + 1) <= 2 
(N-2)/3 <= op
op = CEIL((N-2)/3) = N // 3

Using only insert operatins
N repeated characters 3  4  5  6  7  8  9 10 11 
Min insert operations 1  1  2  2  3  3  4  4  5 == CEIL(N / 2) - 1 or (n-1)//2

If the password is too small there can only be at most 1 repeating character group. becasue if there were 2 the length would be >= 6 which is a valid length

D2 = Delete 2 from group
R1 = Replace 1 in group

Example1:  

len = 27 (7 deletes are necessary)
a a a a a a b c c c c c c d e e e e e e f g g g g g g

6, 6, 6, 6 -> 6, 6, 3, 2 
      D3 D4   R2 R2    R1
OPPS: 12

6, 6, 6, 6 -> 4, 4, 4, 5 
D2 D2 D2 D1   R1 R1 R1 R1
OPPS: 11

Example2:

len = 23 (3 deletes necessary)
a a a a a a a a 1 2 3 4 5 6 7 b b b b b b b b

8, 8 -> 6, 7
D2 D1   R2 R2
OPPS: 7

8, 8 -> 5, 8
D3      R1 R2
OPPS: 6


Observation: If the string is too long characters can be safely deleted.

Proof: If deleting a character would introduce a uniform character sequence of length >= 3 then a neighbour can be safely deleted instead.
Deleting the neighbour will not invalidate the atleast one lower/upper/digit constrait as this character will occure atleast 3 times in the sequence.

Observation: For a group of repeated characters of length N, N // 3 replace operations are nessicary and sufficent to break up the group

Proof:

let Rₙ = the minimum number of replace operations required to break a repeated character string of length l into substrings with length < 3

Rₙ is increasing ie. R₀ <= R₁ <= R₂ <= ...

One of the first 3 characters in the string must be replaced. Because they would form a string of length >= 3 if none were replaced.

Each possability yeilds

Rₙ = Rₙ₋₁ + 1
Rₙ = Rₙ₋₂ + 1
Rₙ = Rₙ₋₃ + 1

Rₙ is increasing so Rₙ₋₃ + 1 <= Rₙ₋₂ + 1 <= Rₙ₋₁ + 1

Rₙ = Rₙ₋₃ + 1
R₂ = 0
R₁ = 0
R₀ = 0

n = 3a + r where a,r ∈ ℕ and 0 <= r <= 3

Rₙ = a + Rᵣ
Rₙ = a = n // 2 

